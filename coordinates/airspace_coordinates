#!/usr/bin/env bash
 
#- Version: 1.0
#- Author: Enrico Spinielli
#- Date: 2015/03/05
#- Copyright (C) 2015 Eurocontrol/PRU


## Usage: airspace_coordinates AIRAC AIRSPACE
## Return the topojson file for AIRSPACE polygon in AIRAC.
## It also produces the CSV and/or GeoJSON files for the AIRBLOCKs composing AIRSPACE _if_ not present.
## NOTE: you need DB connection unless you have a files, <AIRSPACE>.csv, listing the airblocks
##       composing AIRSPACE.
## NOTE: you need DB connection unless you have files, <AIRBLOCK>, with the coordinates of the points
##       of the polygon of AIRBLOCK.
## 
## Arguments:
##   AIRAC                   reference (CFMU) AIRAC number.
##   AIRSPACE                AIRSPACE id.
## 
## Options:
##   -h, --help              Print a usage message summarizing the command-line options, then exit.
##   -V, --version           Output version information and exit.
## 
## Examples:
## $ airspace_coordinates 396 EBBUFIR

SCRIPT=$(basename ${BASH_SOURCE[0]})

help=$(grep "^## " "${SCRIPT}" | cut -c 4-)
version=$(grep "^#- "  "${SCRIPT}" | cut -c 4-)
opt_h() {
  echo "$help"
}
 
opt_v() {
  echo "$version"
}

# Execute getopt
TEMP=$(getopt -o :hV --long "help,version" -n "$SCRIPT" -- "$@");
eval set -- "$TEMP"

while true; do
   case $1 in
   -h|--help)
      opt_h
      exit
      ;;
   -V|--version)
      opt_v
      exit
      ;;
   --)
      shift
      break
      ;;
   \?)
      echo "Invalid option: -$OPTARG" >&2
      opt_h
      exit 1
      ;;
   *)
      echo "Internal error!"
      exit 1
      ;;
   esac
done

# there are 2 mandatory arguments
if (( $# != 2 )); then
   echo "Error: illegal number of parameters"
   opt_h
   exit 1
fi


# process AIRAC and AS
shift $((OPTIND-1))  #getopts move on to the next argument.
AIRAC=$1
AS=$2
files=""
ABs=""

if [[ -f ${AS}.csv ]]
then
   ABs=$(cat ${AS}.csv)
else
   ABs=$(./airblocks_for_airspace ${AIRAC} ${AS})
fi

for AB in ${ABs}
do
   [[ ! -f ${AB} ]]  && ./airblock_coordinates ${AIRAC} ${AB} > ${AB}
   [[ ! -f ${AB}.json ]]  && ./toGeoJSONPolygon ${AB}
   files="${AB}.json ${files}"
done

./node_modules/mapshaper/bin/mapshaper ${files} \
   combine-files -merge-layers name=${AS} -dissolve \
   -o ${AS}.json format=topojson
